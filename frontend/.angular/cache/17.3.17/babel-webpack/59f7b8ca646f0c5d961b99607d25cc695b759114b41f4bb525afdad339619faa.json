{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = 'http://localhost:8080/auth/';\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(this.getCurrentUser());\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  login(credentials) {\n    return this.http.post(API_URL + 'login', credentials).pipe(tap(response => {\n      this.saveToken(response.accessToken);\n      const user = {\n        id: response.id,\n        username: response.username\n      };\n      this.saveUser(user);\n      this.currentUserSubject.next(user);\n    }));\n  }\n  register(userData) {\n    return this.http.post(API_URL + 'register', userData);\n  }\n  logout() {\n    this.clearStorage();\n    this.currentUserSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n  getCurrentUser() {\n    const userStr = localStorage.getItem(USER_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  isLoggedIn() {\n    return this.getToken() !== null;\n  }\n  saveToken(token) {\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n  saveUser(user) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n  clearStorage() {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","API_URL","TOKEN_KEY","USER_KEY","AuthService","constructor","http","currentUserSubject","getCurrentUser","currentUser$","asObservable","login","credentials","post","pipe","response","saveToken","accessToken","user","id","username","saveUser","next","register","userData","logout","clearStorage","getToken","localStorage","getItem","userStr","JSON","parse","isLoggedIn","token","setItem","stringify","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/var/www/html/assessment/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthResponse, LoginRequest, RegisterRequest, User } from '../models/user.model';\n\nconst API_URL = 'http://localhost:8080/auth/';\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<User | null>(this.getCurrentUser());\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(API_URL + 'login', credentials)\n      .pipe(\n        tap(response => {\n          this.saveToken(response.accessToken);\n          const user: User = { id: response.id, username: response.username };\n          this.saveUser(user);\n          this.currentUserSubject.next(user);\n        })\n      );\n  }\n\n  register(userData: RegisterRequest): Observable<any> {\n    return this.http.post(API_URL + 'register', userData);\n  }\n\n  logout(): void {\n    this.clearStorage();\n    this.currentUserSubject.next(null);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  getCurrentUser(): User | null {\n    const userStr = localStorage.getItem(USER_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  isLoggedIn(): boolean {\n    return this.getToken() !== null;\n  }\n\n  private saveToken(token: string): void {\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n\n  private saveUser(user: User): void {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  private clearStorage(): void {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,MAAMC,OAAO,GAAG,6BAA6B;AAC7C,MAAMC,SAAS,GAAG,YAAY;AAC9B,MAAMC,QAAQ,GAAG,WAAW;AAK5B,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,kBAAkB,GAAG,IAAIR,eAAe,CAAc,IAAI,CAACS,cAAc,EAAE,CAAC;IAC7E,KAAAC,YAAY,GAAG,IAAI,CAACF,kBAAkB,CAACG,YAAY,EAAE;EAErB;EAEvCC,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAeZ,OAAO,GAAG,OAAO,EAAEW,WAAW,CAAC,CAChEE,IAAI,CACHd,GAAG,CAACe,QAAQ,IAAG;MACb,IAAI,CAACC,SAAS,CAACD,QAAQ,CAACE,WAAW,CAAC;MACpC,MAAMC,IAAI,GAAS;QAAEC,EAAE,EAAEJ,QAAQ,CAACI,EAAE;QAAEC,QAAQ,EAAEL,QAAQ,CAACK;MAAQ,CAAE;MACnE,IAAI,CAACC,QAAQ,CAACH,IAAI,CAAC;MACnB,IAAI,CAACX,kBAAkB,CAACe,IAAI,CAACJ,IAAI,CAAC;IACpC,CAAC,CAAC,CACH;EACL;EAEAK,QAAQA,CAACC,QAAyB;IAChC,OAAO,IAAI,CAAClB,IAAI,CAACO,IAAI,CAACZ,OAAO,GAAG,UAAU,EAAEuB,QAAQ,CAAC;EACvD;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACnB,kBAAkB,CAACe,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAK,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC3B,SAAS,CAAC;EACxC;EAEAM,cAAcA,CAAA;IACZ,MAAMsB,OAAO,GAAGF,YAAY,CAACC,OAAO,CAAC1B,QAAQ,CAAC;IAC9C,OAAO2B,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C;EAEAG,UAAUA,CAAA;IACR,OAAO,IAAI,CAACN,QAAQ,EAAE,KAAK,IAAI;EACjC;EAEQX,SAASA,CAACkB,KAAa;IAC7BN,YAAY,CAACO,OAAO,CAACjC,SAAS,EAAEgC,KAAK,CAAC;EACxC;EAEQb,QAAQA,CAACH,IAAU;IACzBU,YAAY,CAACO,OAAO,CAAChC,QAAQ,EAAE4B,IAAI,CAACK,SAAS,CAAClB,IAAI,CAAC,CAAC;EACtD;EAEQQ,YAAYA,CAAA;IAClBE,YAAY,CAACS,UAAU,CAACnC,SAAS,CAAC;IAClC0B,YAAY,CAACS,UAAU,CAAClC,QAAQ,CAAC;EACnC;;;uBAnDWC,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXrC,WAAW;MAAAsC,OAAA,EAAXtC,WAAW,CAAAuC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}